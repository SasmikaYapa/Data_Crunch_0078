import pandas as pd
import lightgbm as lgb
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

train_df = pd.read_excel(r"C:\Users\User\Downloads\processed_train.xlsx")
test_df = pd.read_excel(r"C:\Users\User\Downloads\data-crunch-round-1\test.xlsx")

categorical_columns = train_df.select_dtypes(include=["object"]).columns
for col in categorical_columns:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col].astype(str))
    test_df[col] = test_df[col].apply(lambda x: le.transform([x])[0] if x in le.classes_ else -1)

targets = ["Avg_Temperature", "Radiation", "Rain_Amount", "Wind_Speed", "Wind_Direction"]
common_features = [col for col in train_df.columns if col in test_df.columns and col not in ["ID"] + targets]

train_df[common_features] = train_df[common_features].apply(pd.to_numeric, errors="coerce").fillna(train_df[common_features].median())
test_df[common_features] = test_df[common_features].apply(pd.to_numeric, errors="coerce").fillna(test_df[common_features].median())

X_train, X_val, y_train, y_val = train_test_split(train_df[common_features], train_df[targets], test_size=0.2, random_state=42, shuffle=False)

submission = pd.DataFrame({"ID": test_df["ID"]})
r2_scores = {}

for target in targets:
    model = lgb.LGBMRegressor(n_estimators=1000, learning_rate=0.03, max_depth=10, random_state=42)
    model.fit(X_train, y_train[target], eval_set=[(X_val, y_val[target])], verbose=False)
    
    val_predictions = model.predict(X_val)
    r2_scores[target] = r2_score(y_val[target], val_predictions)

    submission[target] = model.predict(test_df[common_features])

submission.to_csv("submission_lgbm.csv", index=False)
print("Submission saved as submission_lgbm.csv")

print("\nModel Performance (R² Scores on Validation Set):")
for target, score in r2_scores.items():
    print(f"{target}: R² = {score:.4f}")
