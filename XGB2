import pandas as pd
import xgboost as xgb
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score

# Load datasets
train_path = r"C:\Users\User\Downloads\processed_train.xlsx"
test_path = r"C:\Users\User\Downloads\data-crunch-round-1\test.xlsx"

train_df = pd.read_excel(train_path)
test_df = pd.read_excel(test_path)

# Encode categorical variables
categorical_columns = train_df.select_dtypes(include=["object"]).columns
for col in categorical_columns:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col].astype(str))
    
    # Handle unseen categories in test set
    test_df[col] = test_df[col].apply(lambda x: le.transform([x])[0] if x in le.classes_ else -1)

# Define targets & features
targets = ["Avg_Temperature", "Radiation", "Rain_Amount", "Wind_Speed", "Wind_Direction"]
common_features = [col for col in train_df.columns if col in test_df.columns and col not in ["ID"] + targets]

# Convert to numeric & fill missing values
train_df[common_features] = train_df[common_features].apply(pd.to_numeric, errors="coerce").fillna(train_df[common_features].median())
test_df[common_features] = test_df[common_features].apply(pd.to_numeric, errors="coerce").fillna(test_df[common_features].median())

# Train XGBoost models & predict
submission = pd.DataFrame({"ID": test_df["ID"]})
r2_scores = {}

for target in targets:
    model = xgb.XGBRegressor(n_estimators=500, learning_rate=0.05, max_depth=6, random_state=42)
    model.fit(train_df[common_features], train_df[target])
    
    # Predict on training data to compute RÂ² score
    train_predictions = model.predict(train_df[common_features])
    r2_scores[target] = r2_score(train_df[target], train_predictions)
    
    # Predict on test data
    submission[target] = model.predict(test_df[common_features])

# Save submission
submission.to_csv("submission_xgb.csv", index=False)
print("âœ… Submission saved as submission_xgb.csv")
print("\nðŸ“Š Model Performance (RÂ² Scores):")
for target, score in r2_scores.items():
    print(f"{target}: RÂ² = {score:.4f}")
