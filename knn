import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import r2_score

# Load datasets
train_path = r"C:\Users\User\Downloads\processed_train.xlsx"
test_path = r"C:\Users\User\Downloads\data-crunch-round-1\test.xlsx"

train_df = pd.read_excel(train_path)
test_df = pd.read_excel(test_path)

# Identify categorical columns
categorical_columns = train_df.select_dtypes(include=["object"]).columns

# Encode categorical variables
for col in categorical_columns:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col].astype(str))
    test_df[col] = test_df[col].apply(lambda x: le.transform([x])[0] if x in le.classes_ else -1)

# Define target variables
targets = ["Avg_Temperature", "Radiation", "Rain_Amount", "Wind_Speed", "Wind_Direction"]

# Select features 
features = [col for col in train_df.columns if col in test_df.columns and col not in ["ID"] + targets]

# Handle missing values (fill with median)
imputer = SimpleImputer(strategy="median")
train_df[features] = imputer.fit_transform(train_df[features])
test_df[features] = imputer.transform(test_df[features])

# Scale features (kNN is sensitive to scale)
scaler = StandardScaler()
train_df[features] = scaler.fit_transform(train_df[features])
test_df[features] = scaler.transform(test_df[features])

# Train kNN model for each target and calculate RÂ² score
submission = pd.DataFrame({"ID": test_df["ID"]})
r2_scores = {}

for target in targets:
    model = KNeighborsRegressor(n_neighbors=5)
    model.fit(train_df[features], train_df[target])

    # Predict on train data to check RÂ² score
    train_predictions = model.predict(train_df[features])
    r2_scores[target] = r2_score(train_df[target], train_predictions)

    # Predict on test data
    submission[target] = model.predict(test_df[features])

# Print RÂ² scores
print("\nðŸ”¹ RÂ² Scores on Training Data:")
for target, score in r2_scores.items():
    print(f"{target}: {score:.4f}")

# Save submission file
submission.to_csv("submission_knn.csv", index=False)
print("\nSubmission saved as submission_knn.csv")
