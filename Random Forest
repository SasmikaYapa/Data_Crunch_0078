import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error

# Load datasets
train_path = r"C:\Users\User\Downloads\processed_train.xlsx"
test_path = r"C:\Users\User\Downloads\data-crunch-round-1\test.xlsx"

train_df = pd.read_excel(train_path)
test_df = pd.read_excel(test_path)

# Define target variables
targets = ["Avg_Temperature", "Radiation", "Rain_Amount", "Wind_Speed", "Wind_Direction"]

# Identify numeric and categorical features
all_features = [col for col in train_df.columns if col not in ["ID"] + targets]
numeric_features = train_df[all_features].select_dtypes(include=[np.number]).columns.tolist()
categorical_features = list(set(all_features) - set(numeric_features))

# Convert categorical features to strings before label encoding
train_df[categorical_features] = train_df[categorical_features].astype(str)
test_df[categorical_features] = test_df[categorical_features].astype(str)

# Label encode categorical features
label_encoders = {}
for col in categorical_features:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col])
    if col in test_df.columns:
        test_df[col] = le.transform(test_df[col])
    else:
        test_df[col] = -1  # Assign a default category for missing columns
    label_encoders[col] = le

# Ensure test_df has the same numeric features as train_df
missing_cols = set(numeric_features) - set(test_df.columns)
for col in missing_cols:
    test_df[col] = np.nan

test_df = test_df[numeric_features]  # Reorder columns

# Handle missing values (fill with median for numeric data)
imputer = SimpleImputer(strategy="median")
train_df[numeric_features] = imputer.fit_transform(train_df[numeric_features])
test_df[numeric_features] = imputer.transform(test_df[numeric_features])

# Align feature list to ensure both datasets have the same columns
all_features = [col for col in all_features if col in test_df.columns]

# Train Random Forest model for each target and calculate RÂ² & RMSE
submission = pd.DataFrame({"ID": test_df.index})
r2_scores = {}
rmse_scores = {}

for target in targets:
    model = RandomForestRegressor(n_estimators=200, max_depth=10, random_state=42, n_jobs=-1)
    model.fit(train_df[all_features], train_df[target])

    # Predict on train data to check RÂ² score
    train_predictions = model.predict(train_df[all_features])
    r2_scores[target] = r2_score(train_df[target], train_predictions)
    rmse_scores[target] = np.sqrt(mean_squared_error(train_df[target], train_predictions))

    # Predict on test data
    submission[target] = model.predict(test_df[all_features])

# Print RÂ² and RMSE scores
print("\nðŸ”¹ Model Performance on Training Data:")
for target in targets:
    print(f"{target}: RÂ² = {r2_scores[target]:.4f}, RMSE = {rmse_scores[target]:.4f}")

# Save submission file
submission.to_csv("submission_random_forest.csv", index=False)
print("\n Submission saved as submission_random_forest.csv")
